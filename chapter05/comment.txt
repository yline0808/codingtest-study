* DFS/BFS 그래프를 탐색하기 위한 대표적인 알고리즘
    - 스택 자료구조를 활용해야 하는 상당수 알고리즘은 재귀 함수를 이용해서 간편하게 구현될 수 있다. (DFS 대표적 예시)
    - DFS (Depth First Search) 깊이 우선 탐색 : 깊은부분 부터 탐색
    - BFS (Breadth First Search) 너비 우선 탐색 : 가까운 노드부터 탐색
    - BFS 가 좀더 빠름
    - 배열 문제에서 그래프 형식으로 생각해서 풀면 풀이법이 쉽게 떠오를지도

* DFS
    - 인접 행렬 방식 : 2차원 배열로 그래프의 연결관계를 표현하는 방식
        0   1   2
    0   0   7   5
    1   7   0   무한
    2   5   무한 0

    - 인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식
    0: [(1, 7), (2, 5)]
    1: [(0, 7)]
    2: [(0, 5)]

    - 인접 행렬 VS 인접 리스트
        메모리 측면 : 인접 행렬 방식은 노드의 개수가 많으면 메모리 낭비
        속도 측면 : 인접 리스트 방식은 연결도니 노드를 찾는 시간이 행렬에 비해 많이 듬
        결론 : 노드와 연결된 모든 인접 노드를 순회해야 하는 경우 인접 리스트 방식이 메모리 공간 낭비가 적다

* 정리
    - dfs => 동작 원리 : 스택, 구현방법 : 재귀 함수 이용
    - bfs => 동작 원리 : 큐, 구현방법 : 큐 자료구조 이용

dfs
방문 : 8 6 7 2 5 4 3 1
반환 : 1 2 7 6 8 3 4 5

bfs
방문 : 1 2 3 8 7 4 5 6
반환 : 1 2 3 8 7 4 5 6